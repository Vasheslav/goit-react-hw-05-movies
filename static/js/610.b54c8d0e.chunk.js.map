{"version":3,"file":"static/js/610.b54c8d0e.chunk.js","mappings":"4LAEaA,EAAS,WACpB,OACE,gBAAKC,MAAO,CAAEC,QAAS,QAASC,OAAQ,OAAQC,MAAO,SAAvD,UACE,SAAC,KAAD,CACEC,SAAS,EACTC,OAAO,MACPF,MAAM,MACNG,UAAU,0BACVC,aAAc,CAAC,EACfC,aAAa,0BACbC,WAAW,UACXC,MAAM,aAIb,C,4JCfYC,EAAgBC,EAAAA,EAAAA,IAAH,gFAMbC,EAAQD,EAAAA,EAAAA,GAAH,oIAQLE,EAAOF,EAAAA,EAAAA,EAAH,6CAIJG,EAAWH,EAAAA,EAAAA,GAAH,iEAKRI,EAAOJ,EAAAA,EAAAA,GAAH,0GAQJK,EAAkBL,EAAAA,EAAAA,IAAH,6GAMfM,EAAkBN,EAAAA,EAAAA,GAAH,sC,SCqD5B,EA9EqB,WAAO,IAAD,IACjBO,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAkCE,EAAAA,EAAAA,UAAS,CAAC,GAA5C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAA4BF,EAAAA,EAAAA,UAAS,QAArC,eAAOG,EAAP,KAAeC,EAAf,KACMC,GAAWC,EAAAA,EAAAA,MACXC,GAAcC,EAAAA,EAAAA,QAAM,oBAACH,EAASI,aAAV,aAAC,EAAgBC,YAAjB,QAAyB,YAEnDC,EAAAA,EAAAA,YAAU,WACRP,EAAU,WAEVQ,EAAAA,EAAAA,IAAA,6CAE0Cd,EAF1C,6DAIGe,MAAK,SAAAC,GACJZ,EAAaY,EAAIC,MACjBX,EAAU,WACX,IACAY,OAAM,SAAAC,GAAK,OAAIC,QAAQD,MAAMA,EAAlB,GACf,GAAE,CAACnB,IAEJ,IAY2B,IAXrBqB,EAAalB,EAAUmB,YACvBC,EAAa,UAFG,8BAEH,eAA0BF,GAE7C,MAAe,SAAXhB,EACK,KAGM,YAAXA,GACK,SAACzB,EAAA,EAAD,IAGM,aAAXyB,GAEA,6BACE,SAAC,KAAD,CACEmB,GAAIf,EAAYgB,QAChB5C,MAAO,CAAEC,QAAS,QAAS4C,aAAc,QAF3C,SAGC,oBAGD,UAAClC,EAAD,YACE,yBAAM+B,IAAiB,gBAAKI,IAAKJ,EAAeK,IAAI,QACpD,4BACE,UAAClC,EAAD,WACGS,EAAU0B,MAAM,KADnB,UACsB1B,EAAU2B,oBADhC,aACsB,EAAwBC,MAAM,KAAK,GAAG,QAE5D,UAACpC,EAAD,WAAM,eAAaqC,KAAKC,MAA+B,GAAzB9B,EAAU+B,cAAmB,QAC3D,SAACtC,EAAD,UAAU,cACV,SAACD,EAAD,UAAOQ,EAAUgC,YACjB,SAACvC,EAAD,UAAU,YACV,SAACC,EAAD,oBACGM,EAAUiC,cADb,aACG,EAAkBC,KAAI,SAAAC,GAAI,OACzB,wBAAmBA,EAAKC,MAAfD,EAAKE,GADW,aAMjC,UAAC1C,EAAD,YACE,SAACH,EAAD,UAAM,4BACN,UAACI,EAAD,YACE,yBACE,SAAC,KAAD,CAAMyB,GAAG,OAAT,SAAgB,YAElB,yBACE,SAAC,KAAD,CAAMA,GAAG,UAAT,SAAmB,qBAIzB,SAAC,EAAAiB,SAAD,CAAUC,UAAU,yBAAK,uBAAzB,UACE,SAAC,KAAD,cAtCR,CA2CD,C","sources":["components/Loader.jsx","page/MovieDetails.styled.jsx","page/MovieDetails.jsx"],"sourcesContent":["import { MagnifyingGlass } from 'react-loader-spinner';\n\nexport const Loader = () => {\n  return (\n    <div style={{ display: 'block', margin: 'auto', width: '100px' }}>\n      <MagnifyingGlass\n        visible={true}\n        height=\"100\"\n        width=\"100\"\n        ariaLabel=\"MagnifyingGlass-loading\"\n        wrapperStyle={{}}\n        wrapperClass=\"MagnifyingGlass-wrapper\"\n        glassColor=\"#c0efff\"\n        color=\"#e15b64\"\n      />\n    </div>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const FlexConteiner = styled.div`\n  display: flex;\n  gap: 20px;\n  margin-bottom: 16px;\n`;\n\nexport const Title = styled.h2`\n  font-family: inherit;\n  font-size: 20px;\n  font-style: normal;\n  font-weight: 700;\n  margin: 20px 0;\n`;\n\nexport const Text = styled.p`\n  margin: 0 0 16px;\n`;\n\nexport const Subtitle = styled.h3`\n  margin: 0 0 16px;\n  font-size: 16px;\n`;\n\nexport const List = styled.ul`\n  display: flex;\n  gap: 10px;\n  list-style: none;\n  padding: 0;\n  margin: 0;\n`;\n\nexport const BorderConteiner = styled.div`\n  padding: 16px;\n  border-top: 1px solid black;\n  border-bottom: 1px solid black;\n`;\n\nexport const ListInformation = styled.ul`\n  margin: 0;\n`;\n","import { Link, Outlet, useLocation, useParams } from 'react-router-dom';\nimport { Suspense, useState, useEffect, useRef } from 'react';\nimport { Loader } from '../components/Loader';\nimport axios from 'axios';\nimport {\n  FlexConteiner,\n  Title,\n  Text,\n  Subtitle,\n  List,\n  BorderConteiner,\n  ListInformation,\n} from './MovieDetails.styled';\n\nconst MovieDetails = () => {\n  const { movieId } = useParams();\n  const [movieInfo, setMovieInfo] = useState({});\n  const [status, setStatus] = useState('idle');\n  const location = useLocation();\n  const backLinkRef = useRef(location.state?.from ?? '/movies');\n\n  useEffect(() => {\n    setStatus('pending');\n\n    axios\n      .get(\n        `https://api.themoviedb.org/3/movie/${movieId}?api_key=010a12c35498ee121131bb88bb81731c&language=en-US`\n      )\n      .then(res => {\n        setMovieInfo(res.data);\n        setStatus('resolved');\n      })\n      .catch(error => console.error(error));\n  }, [movieId]);\n\n  const posterBaseUrl = 'https://image.tmdb.org/t/p/';\n  const posterPath = movieInfo.poster_path;\n  const fullPosterUrl = `${posterBaseUrl}w200${posterPath}`;\n\n  if (status === 'idle') {\n    return null;\n  }\n\n  if (status === 'pending') {\n    return <Loader />;\n  }\n\n  if (status === 'resolved') {\n    return (\n      <main>\n        <Link\n          to={backLinkRef.current}\n          style={{ display: 'block', marginBottom: '10px' }}\n        >\n          Back to search\n        </Link>\n        <FlexConteiner>\n          <div>{fullPosterUrl && <img src={fullPosterUrl} alt=\"\" />}</div>\n          <div>\n            <Title>\n              {movieInfo.title} ({movieInfo.release_date?.split('-')[0]})\n            </Title>\n            <Text>User Score: {Math.floor(movieInfo.vote_average * 10)}%</Text>\n            <Subtitle>Overview</Subtitle>\n            <Text>{movieInfo.overview}</Text>\n            <Subtitle>Genres</Subtitle>\n            <List>\n              {movieInfo.genres?.map(item => (\n                <li key={item.id}>{item.name}</li>\n              ))}\n            </List>\n          </div>\n        </FlexConteiner>\n        <BorderConteiner>\n          <Text>Additional information</Text>\n          <ListInformation>\n            <li>\n              <Link to=\"cast\">Cast</Link>\n            </li>\n            <li>\n              <Link to=\"reviews\">Reviews</Link>\n            </li>\n          </ListInformation>\n        </BorderConteiner>\n        <Suspense fallback={<div>Loading subpage...</div>}>\n          <Outlet />\n        </Suspense>\n      </main>\n    );\n  }\n};\n\nexport default MovieDetails;\n"],"names":["Loader","style","display","margin","width","visible","height","ariaLabel","wrapperStyle","wrapperClass","glassColor","color","FlexConteiner","styled","Title","Text","Subtitle","List","BorderConteiner","ListInformation","movieId","useParams","useState","movieInfo","setMovieInfo","status","setStatus","location","useLocation","backLinkRef","useRef","state","from","useEffect","axios","then","res","data","catch","error","console","posterPath","poster_path","fullPosterUrl","to","current","marginBottom","src","alt","title","release_date","split","Math","floor","vote_average","overview","genres","map","item","name","id","Suspense","fallback"],"sourceRoot":""}